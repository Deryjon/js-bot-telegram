require("dotenv").config();
const { Bot, GrammyError, HttpError, Keyboard } = require("grammy");
const { Client } = require('pg');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
const client = new Client({
  connectionString: 'postgresql://postgres:CqmwWyTqQDahXiUpcQdCJDhxuwylXFBM@monorail.proxy.rlwy.net:35376/railway'
});

client.connect();

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.api.setMyCommands([
  { command: "start", description: "–°—Ç–∞—Ä—Ç –±–æ—Ç" },
  { command: "my_profile", description: "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" },
]);

bot.command("start", async (ctx) => {
  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –¢–≥ –∫–∞–Ω–∞–ª: <a href='https://t.me/dery_budni'>—Å—Å—ã–ª–∫–∞</a>",
    {
      parse_mode: "HTML",
    }
  );
});

bot.hears("ID", async (ctx) => {
  await ctx.reply("–í–∞—à ID: " + ctx.from.id);
});

bot.command("my_profile", async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username || "–ù–µ—Ç";
  const firstName = ctx.from.first_name;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  await client.query(
    'INSERT INTO users (id, username) VALUES ($1, $2) ON CONFLICT (id) DO UPDATE SET username = $2',
    [userId, username]
  );

  await ctx.reply(
    `–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å \n\nüÜî: ${userId}\nüë§: ${username}\nüî§: ${firstName}\nüìû: –ù–µ—Ç—É`
  );

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phoneKeyboard = new Keyboard()
    .requestContact('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞').resized();

  await ctx.reply("–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!", {
    reply_markup: { keyboard: phoneKeyboard.build() }
  });
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
bot.on("message:contact", async (ctx) => {
  const userId = ctx.from.id;
  const contact = ctx.message.contact;

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  await client.query(
    'UPDATE users SET phone_number = $1 WHERE id = $2',
    [contact.phone_number, userId]
  );

  await ctx.reply(`–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${contact.phone_number}`, {
    reply_markup: { remove_keyboard: true }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

bot.start();
